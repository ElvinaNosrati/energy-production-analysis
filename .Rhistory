activity_data <- dt %>%
group_by(weekday) %>%
summarise(Average_Activity = n())
ggplot(activity_data, aes(x = reorder(weekday, -Average_Activity), y = Average_Activity)) +
geom_bar(stat = "identity", color = "pink") +
labs(x = "Weekday", y = "Average Student Activity", title = "Student Activity by Weekday") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readr)
dt <- read.csv("Logs_DS116.csv")
library(ggplot2)
library(dplyr)
dt$Time <- as.POSIXct(dt$Time)
dt$weekday <- weekdays(dt$Time)
activity_data <- dt %>%
group_by(weekday) %>%
summarise(Average_Activity = n())
ggplot(activity_data, aes(x = reorder(weekday, -Average_Activity), y = Average_Activity)) +
geom_bar(stat = "identity") +
labs(x = "Weekday", y = "Average Student Activity", title = "Student Activity by Weekday") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
colors_lecture_data <- dt %>%
filter(event.name == "Course module viewed", description == "Course: colors")
library(ggplot2)
library(dplyr)
colors_lecture_data <- dt %>%
filter(event.name == "Course module viewed" & description == "Course: colors")
library(ggplot2)
library(dplyr)
colors_lecture_data <- dt %>%
filter(Event.context == "Course module viewed" & description == "Course: colors")
library(ggplot2)
library(dplyr)
colors_lecture_data <- dt %>%
filter(Event.context == "Course module viewed" & Description == "Course: colors")
colors_lecture_data$time <- as.POSIXct(colors_lecture_data$time)
ggplot(colors_lecture_data, aes(x = Time)) +
geom_histogram(binwidth = 3600) +  # Bin width: 1 hour (adjust as needed)
labs(x = "Time of Opening", y = "Number of Students", title = "Student Engagement with 'colors' Lecture") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
theme_minimal()
library(ggplot2)
library(dplyr)
colors_lecture_data <- dt %>%
filter(Event.context == "Course module viewed" & Description == "Course: colors")
colors_lecture_data$Time <- as.POSIXct(colors_lecture_data$Time)
ggplot(colors_lecture_data, aes(x = Time)) +
geom_histogram(binwidth = 3600) +
labs(x = "Time of Opening", y = "Number of Students", title = "Student Engagement with 'colors' Lecture") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
theme_minimal()
library(ggplot2)
library(dplyr)
colors_lecture_data <- dt %>%
filter(Event.context == "Course module viewed" & Description == "Course: colors")
colors_lecture_data$Time <- as.POSIXct(colors_lecture_data$Time)
ggplot(colors_lecture_data, aes(x = Time)) +
geom_histogram(binwidth = 3600) +
labs(x = "Time of Opening", y = "Number of Students", title = "Student Engagement with 'colors' Lecture") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
theme_minimal()
engagement_data <- dt %>%
group_by(Event.name) %>%
summarise(Engaged_Students = n_distinct(user.full.name.as.number))
engagement_data <- dt %>%
group_by(Event.name) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
ggplot(engagement_data, aes(x = reorder(event.name, -Engaged_Students), y = Engaged_Students)) +
geom_bar(stat = "identity") +
labs(x = "Event Name", y = "Number of Engaged Students", title = "Student Engagement by Event Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
engagement_data <- dt %>%
group_by(Event name) %>%
engagement_data <- dt %>%
group_by("Event name") %>%
summarise(Engaged_Students = n_distinct(User.full.name))
ggplot(engagement_data, aes(x = reorder(event.name, -Engaged_Students), y = Engaged_Students)) +
geom_bar(stat = "identity") +
labs(x = "Event Name", y = "Number of Engaged Students", title = "Student Engagement by Event Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
engagement_data <- dt %>%
group_by(Event.name) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
ggplot(engagement_data, aes(x = reorder(Event.name, -Engaged_Students), y = Engaged_Students)) +
geom_bar(stat = "identity") +
labs(x = "Event Name", y = "Number of Engaged Students", title = "Student Engagement by Event Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
engagement_data <- dt %>%
group_by(Event.context) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
ggplot(engagement_data, aes(x = reorder(Event.context, -Engaged_Students), y = Engaged_Students)) +
geom_bar(stat = "identity") +
labs(x = "Event Name", y = "Number of Engaged Students", title = "Student Engagement by Event Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
engagement_over_time <- df %>%
group_by(time) %>%
summarise(Engaged_Students = n_distinct(user.full.name.as.number))
library(ggplot2)
library(dplyr)
engagement_over_time <- dt %>%
group_by(Time) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
ggplot(engagement_over_time, aes(x = Time, y = Engaged_Students)) +
geom_line() +
labs(x = "Date", y = "Number of Engaged Students", title = "Student Engagement Over Time") +
theme_minimal()
activity_by_origin <- dt %>%
group_by(Origin, Event.name) %>%
summarise(Engaged_Students = n_distinct(user.full.name))
activity_by_origin <- dt %>%
group_by(Origin, Event.name) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
activity_by_origin %>%
pivot_wider(names_from = Event.name, values_from = Engaged_Students, values_fill = 0) %>%
ggplot(aes(x = origin)) +
geom_bar(aes(fill = `Course viewed`, `Discussion viewed`, `Assignment submitted`), position = "stack") +
labs(x = "Origin", y = "Number of Engaged Students", title = "Student Activity by Origin") +
theme_minimal()
library(tidyr)
activity_by_origin <- dt %>%
group_by(Origin, Event.name) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
activity_by_origin %>%
pivot_wider(names_from = Event.name, values_from = Engaged_Students, values_fill = 0) %>%
ggplot(aes(x = origin)) +
geom_bar(aes(fill = `Course viewed`, `Discussion viewed`, `Assignment submitted`), position = "stack") +
labs(x = "Origin", y = "Number of Engaged Students", title = "Student Activity by Origin") +
theme_minimal()
assignment_data <- dt %>%
filter(component == "mod_assign")
user_origin_bar <- ggplot(data, aes(x = Origin, fill = Origin)) +
geom_bar() +
labs(title = "User Origin Distribution", x = "User Origin", y = "Count") +
theme(legend.position = "top")
print(user_origin_bar)
user_origin_bar <- ggplot(dt, aes(x = Origin, fill = Origin)) +
geom_bar() +
labs(title = "User Origin Distribution", x = "User Origin", y = "Count") +
theme(legend.position = "top")
print(user_origin_bar)
dt$Time <- as.Date(dt$Time)
daily_logins <- dt %>%
filter(Event.name == "A submission has been submitted.") %>%
group_by(Time) %>%
summarise(Daily_Logins = n_distinct(user.full.name))
dt$Time <- as.Date(dt$Time)
daily_logins <- dt %>%
filter(Event.name == "A submission has been submitted.") %>%
group_by(Time) %>%
summarise(Daily_Logins = n_distinct(User.full.name))
ggplot(daily_logins, aes(x = time, y = Daily_Logins)) +
geom_line() +
labs(x = "Date", y = "Number of Logins", title = "Daily Student Logins") +
theme_minimal()
dt$Time <- as.Date(dt$Time)
daily_logins <- dt %>%
filter(Event.name == "A submission has been submitted.") %>%
group_by(Time) %>%
summarise(Daily_Logins = n_distinct(User.full.name))
ggplot(daily_logins, aes(x = time, y = Daily_Logins)) +
geom_line() +
labs(x = "Date", y = "Number of Logins", title = "Daily Student Logins") +
theme_minimal()
dt$Time <- as.Date(dt$Time)
daily_logins <- dt %>%
filter(Event.name == "A submission has been submitted.") %>%
group_by(Time) %>%
summarise(Daily_Logins = n_distinct(User.full.name))
ggplot(daily_logins, aes(x = "Time", y = "Daily_Logins")) +
geom_line() +
labs(x = "Date", y = "Number of Logins", title = "Daily Student Logins") +
theme_minimal()
library(ggplot2)
dt$Time <- as.Date(dt$Time)
enrollment_data <- df %>%
group_by(Time) %>%
summarise(Enrolled_Students = n_distinct(user.full.name))
library(ggplot2)
dt$Time <- as.Date(dt$Time)
enrollment_data <- df %>%
group_by(Time) %>%
summarise(Enrolled_Students = n_distinct(User.full.name))
engagement_data <- dt %>%
group_by(Time, Component, Event.name) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
ggplot(engagement_data, aes(x = time, y = Engaged_Students, fill = component)) +
geom_area() +
labs(x = "Time", y = "Number of Engaged Students", title = "Student Engagement Over Time by Module") +
theme_minimal()
engagement_data <- dt %>%
group_by(Time, Component, Event.name) %>%
summarise(Engaged_Students = n_distinct(User.full.name))
ggplot(engagement_data, aes(x = Time, y = Engaged_Students, fill = Component)) +
geom_area() +
labs(x = "Time", y = "Number of Engaged Students", title = "Student Engagement Over Time by Module") +
theme_minimal()
ggplot(data, aes(Event.context)) +
geom_bar() +
labs(title = "Event Context Distribution", x = "Event Context", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(Event.context)) +
geom_bar() +
labs(title = "Event Context Distribution", x = "Event Context", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readr)
data <- read.csv("Logs_DS116.csv")
getwd()
library(readr)
data <- read.csv("Logs_DS116.csv")
ggplot(data, aes(Event.context)) +
geom_bar() +
labs(title = "Event Context Distribution", x = "Event Context", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ggplot(data, aes(Event.context)) +
geom_bar() +
labs(title = "Event Context Distribution", x = "Event Context", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#User origin chart
library(readr)
library(ggplot2)
data <- read_csv("Logs_DS116.csv")
user_origin_bar <- ggplot(data, aes(x = Origin, fill = Origin)) +
geom_bar() +
labs(title = "User Origin Distribution", x = "User Origin", y = "Count") +
theme(legend.position = "top")
print(user_origin_bar)
library(readr)
library(ggplot2)
data <- read_csv("Logs_DS116.csv")
data$Time <- as.POSIXct(data$Time, format = "%d/%m/%y, %H:%M")
data$Weekday <- weekdays(data$Time)
ggplot(data, aes(x = Weekday)) +
geom_bar(fill = "blue") +
labs(title = "Student Activity by Weekday", x = "Weekday", y = "Activity Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readr)
library(ggplot2)
data <- read_csv("Logs_DS116.csv")
data$Time <- as.POSIXct(data$Time, format = "%d/%m/%y, %H:%M")
data$Weekday <- weekdays(data$Time)
ggplot(data, aes(x = Weekday)) +
geom_bar(fill = "blue") +
labs(title = "Student Activity by Weekday", x = "Weekday", y = "Activity Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readr)
library(ggplot2)
data <- read_csv("Logs_DS116.csv")
activity_by_context <- data %>%
group_by(`Event context`) %>%
summarise(ActivityCount = n())
library(readr)
library(ggplot2)
data <- read_csv("Logs_DS116.csv")
activity_by_context <- data
group_by(`Event context`)
library(readr)
library(ggplot2)
data <- read_csv("Logs_DS116.csv")
activity_by_context <- data %>%
group_by(`Event context`) %>%
summarise(ActivityCount = n())
activity_by_context <- data %>%
group_by(`Event context`) %>%
summarise(ActivityCount = n())
activity_by_context <- data %>%
group_by(Event.context) %>%
summarise(ActivityCount = n())
activity_by_context <- data %>%
group_by(Event.context) %>%
summarise(ActivityCount = n())
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(gplots)
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(gplots)
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(ggplots)
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("gplot")
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(gplot)
install.packages("gplots")
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(gplot)
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(gplots)
library(ggpubr)
library(dplyr)
knitr::include_graphics("Dollar.png")
knitr::include_graphics("usage.jpeg")
ggplot(iris, aes(y = Petal.Length, x = "")) + geom_violin()
data("iris")
data(iris)
plot1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Color Mapped Inside aes()")
plot2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(color = "red") +
ggtitle("Color Set Outside aes()")
plot1
plot2
reticulate::repl_python()
data(iris)
plot1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Color Mapped Inside aes()")
plot2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
ggtitle("Color Set Outside aes()")
plot1
plot2
ggplot(iris, aes(y = Petal.Length, x = Species, fill = Species)) + geom_violin() +
geom_area(stat = "identity", position = "identity", alpha = 0.5) +
theme_minimal() +
labs(title = "Violin Plot of Petal.Length without geom_violin()")
iris_violin <- iris %>%
group_by(Species) %>%
mutate(density = dnorm(Petal.Length, mean = mean(Petal.Length), sd = sd(Petal.Length))) %>%
ungroup()
knitr::include_graphics("usage.jpeg")
dt <- data.frame(
app = c("YouTube", "Messenger", "Spotify"),
usage = c(54, 24, 22))
ggplot(dt, aes(x = app, y = usage)) +
geom_bar(stat = "summary", fill = "gray") +
labs(x = "App", y = "Percentage") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12))
ggplot(iris, aes(y = Petal.Length, x = Species, fill = Species)) + geom_violin() +
geom_area(stat = "identity", position = "identity", alpha = 0.5) +
theme_minimal() +
labs(title = "Violin Plot of Petal.Length without geom_violin()")
iris_violin <- iris %>%
group_by(Species) %>%
mutate(density = dnorm(Petal.Length, mean = mean(Petal.Length), sd = sd(Petal.Length))) %>%
ungroup()
ggplot(iris, aes(y = Petal.Length, x = Species, fill = Species)) + geom_violin() +
geom_area(stat = "identity", position = "identity", alpha = 0.5) +
theme_minimal() +
labs(title = "Violin Plot of Petal.Length")
iris_violin <- iris %>%
group_by(Species) %>%
mutate(density = dnorm(Petal.Length, mean = mean(Petal.Length), sd = sd(Petal.Length))) %>%
ungroup()
knitr::opts_chunk$set(echo = TRUE)
library(colorspace)
library(ggplot2)
library(gplots)
library(ggpubr)
library(dplyr)
data(iris)
plot1 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Color Mapped Inside aes()")
plot2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
ggtitle("Color Set Outside aes()")
plot1
plot2
reticulate::repl_python()
knitr::include_graphics("usage.jpeg")
dt <- data.frame(
app = c("YouTube", "Messenger", "Spotify"),
usage = c(54, 24, 22))
ggplot(dt, aes(x = app, y = usage)) +
geom_bar(stat = "summary", fill = "gray") +
labs(x = "App", y = "Percentage") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12))
ggplot(iris, aes(y = Petal.Length, x = Species, fill = Species)) + geom_violin() +
geom_area(stat = "identity", position = "identity", alpha = 0.5) +
theme_minimal() +
labs(title = "Violin Plot of Petal.Length")
iris_violin <- iris %>%
group_by(Species) %>%
mutate(density = dnorm(Petal.Length, mean = mean(Petal.Length), sd = sd(Petal.Length))) %>%
ungroup()
library(shiny); runApp('Downloads/Projects-2/Example 2/Dashboard/dashboard.R')
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shinythemes")
install.packages("shinythemes")
install.packages("shinydashboard")
install.packages("DT")
install.packages("lubridate")
install.packages("hms")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("ggpubr")
install.packages("ggfortify")
install.packages("fpp2")
install.packages("stringr")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("lemon")
library(shiny); runApp('Downloads/Projects-2/Example 2/Dashboard/dashboard.R')
runApp('Downloads/dv-p-ls/dv-p')
getwd()
setwd("/Users/elvinanosrati/Capstone")
getwd()
git init
# Load required libraries
library(ggplot2)
library(dplyr)
library(lubridate)
library(forecast)
library(tseries)
library(readxl)
# Load dataset
df <- read_excel("Amberd.xlsx")
# Convert date column to Date format
df$Date <- as.Date(df$Date)
# Aggregate data by day (if it's at an hourly level)
df_daily <- df %>%
group_by(Date) %>%
summarise(Daily_Production = sum(`Energy Production (kWh)`, na.rm = TRUE))
# Plot original time series
ggplot(df_daily, aes(x = Date, y = Daily_Production)) +
geom_line(color = "blue") +
labs(title = "Daily Energy Production", x = "Date", y = "Energy Production (kWh)") +
theme_minimal()
# ACF and PACF plots
acf(df_daily$Daily_Production, main="Autocorrelation of Energy Production")
pacf(df_daily$Daily_Production, main="Partial Autocorrelation of Energy Production")
df_daily$Diff_Production <- diff(df_daily$Daily_Production, lag=1)
# Load required libraries
library(ggplot2)
library(dplyr)
library(lubridate)
library(forecast)
library(tseries)
library(readxl)
# Load dataset
df <- read_excel("Amberd.xlsx")
# Convert date column to Date format
df$Date <- as.Date(df$Date)
# Remove NA values
df <- df %>% drop_na(`Energy Production (kWh)`)
# Load required libraries
library(ggplot2)
library(dplyr)
library(lubridate)
library(forecast)
library(tseries)
library(readxl)
# Load dataset
df <- read_excel("Amberd.xlsx")
# Convert date column to Date format
df$Date <- as.Date(df$Date)
# Aggregate data by day (if it's at an hourly level)
df_daily <- df %>%
group_by(Date) %>%
summarise(Daily_Production = sum(`Energy Production (kWh)`, na.rm = TRUE))
# Plot original time series
ggplot(df_daily, aes(x = Date, y = Daily_Production)) +
geom_line(color = "blue") +
labs(title = "Daily Energy Production", x = "Date", y = "Energy Production (kWh)") +
theme_minimal()
# ACF and PACF plots
acf(df_daily$Daily_Production, main="Autocorrelation of Energy Production")
pacf(df_daily$Daily_Production, main="Partial Autocorrelation of Energy Production")
df_daily <- df_daily %>%
mutate(Diff_Production = c(NA, diff(Daily_Production, lag=1)))  # Add NA for first row
ggplot(df_daily, aes(x = Date, y = Diff_Production)) +
geom_line(color = "red") +
labs(title = "Differenced Energy Production", x = "Date", y = "Differenced Production") +
theme_minimal()
acf(df_daily$Diff_Production, na.action = na.omit, main="ACF After Differencing")
pacf(df_daily$Diff_Production, na.action = na.omit, main="PACF After Differencing")
# Convert data to time series format (assuming daily data)
ts_data <- ts(df_daily$Daily_Production, frequency = 365)
# Apply STL decomposition
stl_model <- stl(ts_data, s.window = "periodic")
# Plot STL components
plot(stl_model)
# Create Fourier terms
fourier_terms <- fourier(ts_data, K=5)  # K = Number of harmonics (try tuning this)
plot(fourier_terms, type="l", main="Fourier Transform Components")
knitr::opts_chunk$set(echo = TRUE)
getwd()
